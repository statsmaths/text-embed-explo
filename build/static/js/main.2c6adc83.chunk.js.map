{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["MakeSVG","props","Viewer","useRef","useEffect","current","fitToViewer","ref","width","height","onZoom","e","console","log","onPan","onClick","event","x","y","originalEvent","tool","background","viewBox","xmlns","inner","ScatterPlot","handleFileUpload","fileReader","FileReader","readAsText","target","files","onload","setState","docs","JSON","parse","result","state","docid","value","this","points","map","obj","i","cx","v1","cy","v2","r","size","fill","color","onMouseOver","handleChangeDocument","upload","className","htmlFor","id","type","onChange","text","meta","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qSAMA,SAASA,EAAQC,GACf,IAAMC,EAASC,iBAAO,MAMtB,OAJAC,qBAAU,WACRF,EAAOG,QAAQC,gBACd,IAGC,cAAC,IAAD,CACEC,IAAKL,EACLM,MAAO,IAAKC,OAAQ,IACpBC,OAAQ,SAAAC,GAAC,OAAIC,QAAQC,IAAI,SACzBC,MAAO,SAAAH,GAAC,OAAIC,QAAQC,IAAI,QACxBE,QAAS,SAAAC,GAAK,OAAIJ,QAAQC,IAAI,QAASG,EAAMC,EAAGD,EAAME,EAAGF,EAAMG,gBAC/DC,KAAM,OACNC,WAAY,OAPd,SASE,qBAAKC,QAAQ,cAAcC,MAAM,6BAA6Bf,MAAM,OAAOC,OAAO,OAAlF,SACGR,EAAMuB,U,IAMXC,E,kDAEJ,WAAYxB,GAAQ,IAAD,8BACjB,cAAMA,IAgBRyB,iBAAmB,SAACf,GAClB,IAAMgB,EAAa,IAAIC,WACvBD,EAAWE,WAAWlB,EAAEmB,OAAOC,MAAM,GAAI,SACzCJ,EAAWK,OAAS,SAAArB,GAClB,EAAKsB,SAAS,CACZC,KAAMC,KAAKC,MAAMzB,EAAEmB,OAAOO,YApB9B,EAAKC,MAAQ,CACXJ,KAAM,KACNK,OAAQ,GAJO,E,8GAWEC,GACnBC,KAAKR,SAAS,CACZM,MAAOC,M,+BAcD,IAAD,OAEHE,EAAS,KACTD,KAAKH,MAAMJ,OAEbtB,QAAQC,IAAI4B,KAAKH,MAAMJ,MAEvBQ,EAASD,KAAKH,MAAMJ,KAAKS,KAAI,SAACC,EAAKC,GACjC,OACE,wBACEC,GAAa,IAATF,EAAIG,GACRC,GAAa,IAATJ,EAAIK,GACRC,EAAGN,EAAIO,KACPC,KAAMR,EAAIS,MAEVC,YAAa,kBAAM,EAAKC,qBAAqBV,KADxCA,MAKXH,EACE,cAAC1C,EAAD,CACEwB,MAAOkB,KAKb,IAAIc,EACF,sBAAKC,UAAU,cAAf,UACE,uBAAOA,UAAU,SAASC,QAAQ,SAAlC,8BACA,uBAAOC,GAAG,SAASC,KAAK,OAAOC,SAAUpB,KAAKf,sBAI9CoC,EAAO,KACPC,EAAO,KAOX,OANItB,KAAKH,MAAMC,OAAS,IAEtBuB,EAAOrB,KAAKH,MAAMJ,KAAKO,KAAKH,MAAMC,OAAOuB,KACzCC,EAAOtB,KAAKH,MAAMJ,KAAKO,KAAKH,MAAMC,OAAOwB,KAAK,GAAvC,QAIP,sBAAKN,UAAW,gBAAhB,UACGD,EACD,qBAAKC,UAAW,sBAAhB,SACGf,IAEH,sBAAKe,UAAW,WAAhB,UACE,+BAAM,4BAAIM,MACV,4BAAID,c,GA9EYE,IAAMC,WA8FjBC,MANf,WACE,OACE,cAAC,EAAD,KC5GWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2c6adc83.chunk.js","sourcesContent":["import React, {useRef, useEffect} from 'react';\nimport './reset.css';\nimport './App.css';\n\nimport {UncontrolledReactSVGPanZoom} from 'react-svg-pan-zoom';\n\nfunction MakeSVG(props) {\n  const Viewer = useRef(null);\n\n  useEffect(() => {\n    Viewer.current.fitToViewer();\n  }, []);\n\n  return (\n      <UncontrolledReactSVGPanZoom\n        ref={Viewer}\n        width={750} height={750}\n        onZoom={e => console.log('zoom')}\n        onPan={e => console.log('pan')}\n        onClick={event => console.log('click', event.x, event.y, event.originalEvent)}\n        tool={\"auto\"}\n        background={\"#fff\"}\n      >\n        <svg viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\">\n          {props.inner}\n        </svg>\n      </UncontrolledReactSVGPanZoom>\n  )\n}\n\nclass ScatterPlot extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      docs: null,\n      docid: -1\n    }\n  }\n\n  componentDidMount() {\n  }\n\n  handleChangeDocument(value) {\n    this.setState({\n      docid: value\n    });\n  }\n\n  handleFileUpload = (e) => {\n    const fileReader = new FileReader();\n    fileReader.readAsText(e.target.files[0], \"UTF-8\");\n    fileReader.onload = e => {\n      this.setState({\n        docs: JSON.parse(e.target.result)\n      });\n    };\n  }\n\n  render() {\n\n    let points = null;\n    if (this.state.docs)\n    {\n      console.log(this.state.docs);\n\n      points = this.state.docs.map((obj, i) => {\n        return (\n          <circle\n            cx={obj.v1 * 100}\n            cy={obj.v2 * 100}\n            r={obj.size}\n            fill={obj.color}\n            key={i}\n            onMouseOver={() => this.handleChangeDocument(i)}\n            />);\n      });\n\n      points = (\n        <MakeSVG\n          inner={points}\n        />\n      );\n    }\n\n    let upload = (\n      <div className=\"file-loader\">\n        <label className=\"button\" htmlFor=\"upload\">Upload JSON File</label>\n        <input id=\"upload\" type=\"file\" onChange={this.handleFileUpload} />\n      </div>\n    );\n\n    let text = null;\n    let meta = null;\n    if (this.state.docid > -1)\n    {\n      text = this.state.docs[this.state.docid].text;\n      meta = this.state.docs[this.state.docid].meta[0]['doc_id'];\n    }\n\n    return (\n      <div className={\"vis-container\"}>\n        {upload}\n        <div className={\"vis-container-inner\"}>\n          {points}\n        </div>\n        <div className={\"vis-text\"}>\n          <span><b>{meta}</b></span>\n          <p>{text}</p>\n        </div>\n      </div>\n    )\n  }\n}\n\n// ***************************************************************************\n// Wrap the App and return the rendered Viewer\n\nfunction App() {\n  return (\n    <ScatterPlot />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}